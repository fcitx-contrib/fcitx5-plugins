diff --git a/CMakeLists.txt b/CMakeLists.txt
index f0d9f86..32a032c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -71,7 +71,6 @@ fcitx5_add_i18n_definition()
 add_subdirectory(modules)
 add_subdirectory(im)
 add_subdirectory(po)
-add_subdirectory(tools)
 
 if (ENABLE_GUI)
     add_subdirectory(gui)
diff --git a/im/pinyin/pinyin.cpp b/im/pinyin/pinyin.cpp
index 78fc52c..f5d1d64 100644
--- a/im/pinyin/pinyin.cpp
+++ b/im/pinyin/pinyin.cpp
@@ -674,8 +674,7 @@ std::string PinyinEngine::evaluateCustomPhrase(InputContext *inputContext,
 
 PinyinEngine::PinyinEngine(Instance *instance)
     : instance_(instance),
-      factory_([this](InputContext &) { return new PinyinState(this); }),
-      worker_(instance->eventDispatcher()) {
+      factory_([this](InputContext &) { return new PinyinState(this); }) {
     ime_ = std::make_unique<libime::PinyinIME>(
         std::make_unique<libime::PinyinDictionary>(),
         std::make_unique<libime::UserLanguageModel>(
@@ -833,25 +832,18 @@ void PinyinEngine::loadDict(const std::string &fullPath,
     }
     ime_->dict()->addEmptyDict();
     PINYIN_DEBUG() << "Loading pinyin dict " << fullPath;
-    std::packaged_task<libime::PinyinDictionary::TrieType()> task([fullPath]() {
-        std::ifstream in(fullPath, std::ios::in | std::ios::binary);
-        auto trie = libime::PinyinDictionary::load(
-            in, libime::PinyinDictFormat::Binary);
-        return trie;
-    });
-    taskTokens.push_back(worker_.addTask(
-        std::move(task),
-        [this, index = ime_->dict()->dictSize() - 1, fullPath](
-            std::shared_future<libime::PinyinDictionary::TrieType> &future) {
-            try {
-                PINYIN_DEBUG()
-                    << "Load pinyin dict " << fullPath << " finished.";
-                ime_->dict()->setTrie(index, future.get());
-            } catch (const std::exception &e) {
-                PINYIN_ERROR() << "Failed to load pinyin dict " << fullPath
-                               << ": " << e.what();
-            }
-        }));
+    std::ifstream in(fullPath, std::ios::in | std::ios::binary);
+    auto trie = libime::PinyinDictionary::load(
+        in, libime::PinyinDictFormat::Binary);
+    auto index = ime_->dict()->dictSize() - 1;
+    try {
+        PINYIN_DEBUG()
+            << "Load pinyin dict " << fullPath << " finished.";
+        ime_->dict()->setTrie(index, trie);
+    } catch (const std::exception &e) {
+        PINYIN_ERROR() << "Failed to load pinyin dict " << fullPath
+                        << ": " << e.what();
+    }
 }
 
 void PinyinEngine::loadBuiltInDict() {
diff --git a/im/pinyin/pinyin.h b/im/pinyin/pinyin.h
index b0fb7d6..d9ddea7 100644
--- a/im/pinyin/pinyin.h
+++ b/im/pinyin/pinyin.h
@@ -459,7 +459,6 @@ private:
     std::unique_ptr<HandlerTableEntry<EventHandler>> event_;
     CustomPhraseDict customPhrase_;
     SymbolDict symbols_;
-    WorkerThread worker_;
     std::list<std::unique_ptr<TaskToken>> persistentTask_;
     std::list<std::unique_ptr<TaskToken>> tasks_;
 
diff --git a/modules/pinyinhelper/stroke.cpp b/modules/pinyinhelper/stroke.cpp
index 9bb26ed..a3fe3ab 100644
--- a/modules/pinyinhelper/stroke.cpp
+++ b/modules/pinyinhelper/stroke.cpp
@@ -34,11 +34,11 @@ namespace fcitx {
 Stroke::Stroke() {}
 
 void Stroke::loadAsync() {
-    if (loadFuture_.valid()) {
+    if (loaded_) {
         return;
     }
 
-    loadFuture_ = std::async(std::launch::async, []() {
+    loadFuture_ = ([]() {
         std::tuple<libime::DATrie<int32_t>, libime::DATrie<int32_t>> result;
         auto &dict = std::get<0>(result);
         auto &reverseDict = std::get<1>(result);
@@ -86,18 +86,16 @@ void Stroke::loadAsync() {
         reverseDict.shrink_tail();
 
         return result;
-    });
+    })();
 }
 
 bool Stroke::load() {
     if (loaded_) {
         return loadResult_;
     }
-    if (!loadFuture_.valid()) {
-        loadAsync();
-    }
+    loadAsync();
     try {
-        std::tie(dict_, revserseDict_) = loadFuture_.get();
+        std::tie(dict_, revserseDict_) = loadFuture_;
         loadResult_ = true;
     } catch (...) {
         loadResult_ = false;
diff --git a/modules/pinyinhelper/stroke.h b/modules/pinyinhelper/stroke.h
index 048e2a0..009c496 100644
--- a/modules/pinyinhelper/stroke.h
+++ b/modules/pinyinhelper/stroke.h
@@ -33,7 +33,7 @@ private:
     bool loaded_ = false;
     bool loadResult_ = false;
 
-    std::future<std::tuple<libime::DATrie<int32_t>, libime::DATrie<int32_t>>>
+    std::tuple<libime::DATrie<int32_t>, libime::DATrie<int32_t>>
         loadFuture_;
 };
 } // namespace fcitx
